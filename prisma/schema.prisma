generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Proveedor {
  id        Int        @id @default(autoincrement())
  nombre    String
  telefono  String?
  email     String?
  direccion String?
  productos Producto[]
  compras   Compra[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Categoria {
  id        Int        @id @default(autoincrement())
  nombre    String
  productos Producto[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Producto {
  id          Int        @id @default(autoincrement())
  codigo      String     @unique
  descripcion String
  costo       Float
  margen      Float // üëà agregado aqu√≠ en el modelo
  precioVenta Float
  proveedorId Int
  categoriaId Int
  proveedor   Proveedor  @relation(fields: [proveedorId], references: [id])
  categoria   Categoria  @relation(fields: [categoriaId], references: [id])
  variantes   Variante[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Variante {
  id          Int               @id @default(autoincrement())
  productoId  Int
  talle       String
  color       String
  stock       Int               @default(0)
  codBarra    String            @unique
  producto    Producto          @relation(fields: [productoId], references: [id])
  detalles    DetalleCompra[]
  movimientos MovimientoStock[]
  Stock       Stock?
}

model Contador {
  id        Int      @id @default(autoincrement())
  nombre    String   @unique
  valor     Int
  updatedAt DateTime @updatedAt
}

model Stock {
  id            Int      @id @default(autoincrement())
  varianteId    Int      @unique
  cantidad      Int
  costo         Float
  precioVenta   Float
  actualizadoEn DateTime @updatedAt

  variante Variante @relation(fields: [varianteId], references: [id])
}

enum TipoMovimiento {
  INGRESO
  EGRESO
  AJUSTE
  CAMBIO
  COMPRA
}

model MovimientoStock {
  usuarioId   Int? // para registrar qui√©n hizo el movimiento, si agreg√°s usuarios
  id          Int            @id @default(autoincrement())
  varianteId  Int
  tipo        TipoMovimiento
  cantidad    Int
  comprobante String
  observacion String?
  fecha       DateTime       @default(now())
  variante    Variante       @relation(fields: [varianteId], references: [id])
}

model Compra {
  id             Int             @id @default(autoincrement())
  nroComprobante String          @unique @default("TEMP")
  proveedor      Proveedor       @relation(fields: [proveedorId], references: [id])
  proveedorId    Int
  fecha          DateTime        @default(now())
  total          Float
  detalles       DetalleCompra[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model DetalleCompra {
  id         Int      @id @default(autoincrement())
  compra     Compra   @relation(fields: [compraId], references: [id])
  compraId   Int
  variante   Variante @relation(fields: [varianteId], references: [id])
  varianteId Int
  cantidad   Int
  costo      Float
  subtotal   Float    @default(0) // calculado como cantidad * costo si quer√©s simplificar an√°lisis
}
